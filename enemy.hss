# Katja's Abyss: Tactics
# by Kiefer Nemeth
# enemy.hss
# Enemy AI and creation

# On enemy turns, "performEnemyActions" begins looping through each enemy, and for each it finds the closest target, 
# moves the enemy, then attacks if target is in range.
# Enemies use a Breadth First Search algorithm to find the closest target (in "findTargetLocation"). Since Hspeak 
# has no arrays, I created a data structure by storing data in the screen position of invisible objects called slices.
# The slice arrays are modeled after Python Lists and are detailed in "arrays.hss" in my GitHub code-sample repo.

script, createEnemy, id, x, y, begin
    variable(ref, counter)
    
    spawnDustAtTile(x, y)
    ref := createNPC(id, x, y)
    setNPCExtra(ref, extra2, getUnitMaxHealth(ref))
    dissolveSprite(getNPCSprite(ref), dissolve:melt, time:5, 0, true)
    
    if(id == enemy:hive) then(
        counter := loadAttackSprite(11)
        setParent(counter, getNPCSlice(ref))
        setSpriteFrame(counter, 2)
    )
end

script, getEnemyCount, begin
    variable(ref, c)
    
    ref := nextNPCReference()
    while(ref) do(
        if(getNPCID(ref) >= enemy:walker && getNPCID(ref) <= enemy:dummy) then(
            c += 1
        )
        ref := nextNPCReference(ref)
    )
    
    return(c)
end

script, performEnemyActions, begin
    variable(ref)
    
    ref := nextNPCReference()
    # Ensure ref is an enemy
    while(ref) do(
        if(getNPCID(ref) >= enemy:walker && getNPCID(ref) <= enemy:dummy) then(
            break
        )
        ref := nextNPCReference(ref)
    )

    if(getNPCID(ref) >= enemy:walker && getNPCID(ref) <= enemy:dummy) then(
        playSound(random(sfx:enemy_call01, sfx:enemy_call05), false, true)
        currentEnemy := 1
        nextEnemyAction(ref)
    ) else(
        currentEnemy := -1
    )
end

script, nextEnemyAction, ref, begin
    variable(temp, dist, n, target, targetX, targetY, i, j, spd, vfx)
    
    if(ref == false) then(
        # All enemies have moved
        wait(1)
        currentEnemy := -1
        exitScript
    )
    
    if(getNPCID(ref) == enemy:dummy) then(
        setTimer(timer:moving, time:4, 1, @finishEnemyAction)
        setTimerArgs(timer:moving, ref)
        exitScript
    ) elseif(getNPCID(ref) == enemy:hive) then(
        # Hive hatches after 3 turns
        if(getSpriteFrame(lastChild(getNPCSlice(ref))) == 0) then(
            # Hatch
            setSliceVisible(getNPCSlice(ref), false)
            vfx := loadAttackSprite(0) 
            setParent(vfx, lookupSlice(sl:mapLayer8))
            createAnimation(vfx, npcPixelX(ref)+10, npcPixelY(ref)+10, 6, 2, false)
            # Spawn new enemies in any available spots adjacent to the hive
            for(i, -1, 1) do(
                for(j, -1, 1) do(
                    if(i <> 0 && j <> 0) then(continue)
                    if(readPassBlock(npcX(ref)+i, npcY(ref)+j) > 0) then(continue)
                    if(npcAtSpot(npcX(ref)+i, npcY(ref)+j) && npcAtSpot(npcX(ref)+i, npcY(ref)+j) <> ref) then(continue)
                    if(campaignMode == false || currentLevel > 1) then(
                        if(campaignMode && currentLevel == 1) then(
                            createEnemy(enemy:mite, npcX(ref)+i, npcY(ref)+j)
                        ) elseif(random(0,1)) then(
                            createEnemy(enemy:walker, npcX(ref)+i, npcY(ref)+j)
                        ) else(
                            createEnemy(enemy:spitter, npcX(ref)+i, npcY(ref)+j)
                        )
                    ) else(
                        # Level 1 doesn't have tougher enemies
                        createEnemy(enemy:mite, npcX(ref)+i, npcY(ref)+j)
                    )
                )
            )
        ) else(
            setSpriteFrame(lastChild(getNPCSlice(ref)), getSpriteFrame(lastChild(getNPCSlice(ref)))--1)
        )
        setTimer(timer:moving, time:4, 1, @finishEnemyAction)
        setTimerArgs(timer:moving, ref)
        exitScript
    )
    
    # Check for attackable unit > check for reachable unit > check for closest unit
    
    if(getNPCID(ref) == enemy:spitter) then(dist := 2) # set range
    else(dist := 1)
    spd := readNPC(getNPCID(ref), npcStat:movespeed)
    
    # Check for attackable unit at current location
    target := checkTargetInRange(npcX(ref), npcY(ref), dist)
    if(target) then(
        # Focus cam on target, then queue attack timer
        putSlice(createSelector(), npcPixelX(target), npcPixelY(target))
        putCamera(npcPixelX(target) -- (getScreenWidth/2), npcPixelY(target) -- (getScreenHeight/2))
        setTimer(timer:moving, time:15, 1,  @enemyAction)
        setTimerArgs(timer:moving, ref, target)
        exitScript
    )
    
    # Check for reachable unit (not necessarily on this turn)
    # If none exist, just find the physically closest, then start moving 
    # toward whichever target is found
    target := findTargetLocation(ref, npcX(ref), npcY(ref), dist) # Slice with target x, y coords
    if(target && (getNPCID(ref) <> enemy:walker || getSliceExtra(target, extra0) <= spd)) then(
        # Use BFS-found target
        # If target is out of range for this turn and the enemy is a walker, try to burrow instead
        targetX := sliceX(target)
        targetY := sliceY(target)
        freeSlice(target)
    ) else(
        # Find the physically closest player unit
        dist := 9999
        n := nextNPCReference()
        while(n) do(
            if(getNPCID(n) >= enemy:walker) then(
                n := nextNPCReference(n) 
                continue
            )
            if(getNPCID(ref) == enemy:walker) then(
                # Burrow passive
                if(abs(npcX(n) -- npcX(ref)) + abs(npcY(n) -- npcY(ref)) <= spd) then(
                    # Can be reached via burrow
                    for(i, -1, 1) do(
                        for(j, -1, 1) do(
                            if(i == j || (i <> 0 && j <> 0)) then(continue)
                            if(npcAtSpot(npcX(n)+i, npcY(n)+j) == false 
                            && readPassBlock(npcX(n)+i, npcY(n)+j) == 0
                            && abs((npcX(n)+i) -- npcX(ref)) + abs((npcY(n)+j) -- npcY(ref)) <= spd
                            ) then(
                                # Burrow here
                                passiveProc(enemy:walker, npcPixelX(ref)+10, npcPixelY(ref))
                                burrowEnemy(ref, npcX(n)+i, npcY(n)+j)
                                exitScript
                            )
                        )
                    )
                )
            )
            if(abs(npcX(n) -- npcX(ref)) + abs(npcY(n) -- npcY(ref)) < dist) then(
                dist := abs(npcX(n) -- npcX(ref)) + abs(npcY(n) -- npcY(ref))
                target := n
            )
            n := nextNPCReference(n)
        )
        targetX := npcX(target)
        targetY := npcY(target)
    )
    
    pathfindNPCTo(ref, targetX, targetY, 1)
    
    setTimer(timer:moving, 0, 1, @continueEnemyMove)
    setTimerArgs(timer:moving, ref, targetX, targetY, npcX(ref), npcY(ref))
end

script, continueEnemyMove, ref, x, y, oldX, oldY, begin
    # Continues unit move, checks for steps left
    variable(spd, curX, curY, dist)
    
    if(getNPCID(ref) == enemy:spitter) then(dist := 2) # set range
    else(dist := 1)
    curX := oldX, curY := oldY
    spd := getUnitMoved(ref)
    if(spd > 0 && npcIsWalking(ref)) then(
        # Continue pathing
        curX := (npcPixelX(ref)+10)/20, curY := (npcPixelY(ref)+10)/20
        if(oldX <> curX || oldY <> curY) then(
            setUnitMoved(ref, spd--1)
        )
        if(spd == 0 || (x == curX && y == curY) || checkTargetInRange(curX, curY, dist)) then(
            # Ran out of movement or reached target
            endUnitMove()
        ) else(
            setTimer(timer:moving, 0, 1, @continueEnemyMove)
            setTimerArgs(timer:moving, ref, x, y, curX, curY)
        )
    ) else(
        # Done pathing or cut off by speed
        endUnitMove()
    )
    
    subscript, endUnitMove, begin
        # Check for unit to attack, then either queue attack or end of action
        variable(npc)
        cancelNPCWalk(ref)
        
        # Attack if adjacent
        npc := checkTargetInRange(curX, curY, dist)
        if(npc) then(
            # Show which unit this enemy will attack, and pause before actually attacking
            putSlice(createSelector(), npcPixelX(npc), npcPixelY(npc))
            putCamera(npcPixelX(npc) -- (getScreenWidth/2), npcPixelY(npc) -- (getScreenHeight/2))
            setTimer(timer:moving, time:15, 1,  @enemyAction)
            setTimerArgs(timer:moving, ref, npc)
        ) else(
            # Queue next enemy
            setTimer(timer:moving, time:4, 1, @finishEnemyAction)
            setTimerArgs(timer:moving, ref)
        )
    end
end

script, checkTargetInRange, x, y, dist, begin
    # Check if a unit is within dist
    variable(i, j, npc) 
    
    for(i, 0--dist, dist) do(
        for(j, 0--dist, dist) do(
            if(abs(i) + abs(j) <> dist) then(continue) # Not exact range
            npc := npcAtSpot(i + x, j + y)
            if(npc && getNPCID(npc) <= unit:radar) then(
                # Unit is within attacking range of this tile
                exitReturning(npc)
            )
        )
    )
    
    exitReturning(false) # Didn't find an NPC
end

script, enemyAction, ref, target, begin
    # Attack the target unit, then finish action
    variable(vfx)
    if(getNPCID(target) == unit:katja && random(1,100) < 11) then(
        # Katja Passive: whisperer
        passiveProc(unit:katja, npcPixelX(target)+10, npcPixelY(target))
        vfx := loadAttackSprite(10)
        setParent(vfx, lookupSlice(sl:mapLayer8))
        createAnimation(vfx, npcPixelX(target)+10, npcPixelY(target)+10, 12, 2, false)
        playSound(sfx:enemy_call01, false, true)
        playSound(sfx:walking, false, true)
    ) else(
        vfx := loadHeroSprite(16)
        setParent(vfx, lookupSlice(sl:mapLayer8))
        createAnimation(vfx, (npcX(target)*20)+10, npcY(target)*20, 16, 2, false)
        # Delay attack 
        setTimer(timer:attack, time:8, 1, @attackUnit)
        setTimerArgs(timer:attack, ref, target, false)
        pauseForTicks(9)
    )
    if(lookupSlice(sli:tileSelector)) then(destroySelector())
    
    setTimer(timer:moving, time:10, 1, @finishEnemyAction)
    setTimerArgs(timer:moving, ref)
end

script, finishEnemyAction, ref, begin
    variable(n, temp, dist, next, i, j)
    
    # Behemoth Passive: summoning
    if(getNPCID(ref) == enemy:behemoth && random(1,100) < 51) then(
        n := false
        for(i, -1, 1) do(
            for(j, -1, 1) do(
                if(n == false && npcAtSpot(npcX(ref)+i, npcY(ref)+j) == false) then(
                    passiveProc(enemy:behemoth, npcPixelX(ref)+10, npcPixelY(ref))
                    n := true
                    createEnemy(enemy:mite, npcX(ref)+i, npcY(ref)+j)
                )
            )
        )
    )
    
    setUnitMoved(ref, 0)
    setUnitActed(ref, true)
    
    # Remove hive if hatched
    if(getNPCID(ref) == enemy:hive && getSliceVisible(getNPCSlice(ref)) == false) then(
        destroyNPC(ref)
    )
    
    # Next ref's action
    next := 0
    n := nextNPCReference()
    # Ensure ref is an enemy
    while(n) do(
        if(getNPCID(n) >= enemy:walker && getNPCID(ref) <= enemy:dummy && getUnitMoved(n) > 0 && getUnitActed(n) == false) then(
            next := n
            break
        )
        n := nextNPCReference(n)
    )
    
    if(next) then(
        # Valid next enemy
        setTimer(timer:moving, time:4, 1, @focusNextEnemy)
        setTimerArgs(timer:moving, next)
    ) else(
        # No more unmoved enemies
        currentEnemy := -1
    )
end

script, focusNextEnemy, next, begin
    if(readMapBlock(npcX(next), npcY(next), 3) == 0 && getNPCID(next) <= enemy:dummy) then(
        # Not in fog, so follow it
        putCamera(npcPixelX(next) -- (getScreenWidth/2), npcPixelY(next) -- (getScreenHeight/2))
    )
    playSound(random(sfx:enemy_call01, sfx:enemy_call05), false, true)
    
    setTimer(timer:moving, time:9, 1, @nextEnemyAction)
    setTimerArgs(timer:moving, next)
end

script, burrowEnemy, ref, tarX, tarY, begin
    # Walker passive, disappear underground, then appear at target after timer
    variable(vfx)
    
    spawnDustAtTile(npcX(ref), npcY(ref))
    dissolveSprite(getNPCSprite(ref), dissolve:melt, time:8, 0)
    playSound(sfx:approach, false, true)
    
    setTimer(timer:moving, time:8, 1, @unearth)
    setTimerArgs(timer:moving, ref, tarX, tarY)
end

script, unearth, ref, x, y, begin
    # Dissolve backwards and teleport to target location
    variable(npc)
    
    setNPCPosition(ref, x, y)
    spawnDustAtTile(npcX(ref), npcY(ref))
    dissolveSprite(getNPCSprite(ref), dissolve:melt, time:8, 0, true)
    
    npc := checkTargetInRange(x, y, 1)
    # Show which unit this enemy will attack, and pause before actually attacking
    putSlice(createSelector(), npcPixelX(npc), npcPixelY(npc))
    putCamera(npcPixelX(npc) -- (getScreenWidth/2), npcPixelY(npc) -- (getScreenHeight/2))
    setTimer(timer:moving, time:15, 1,  @enemyAction)
    setTimerArgs(timer:moving, ref, npc)
end

# Pathfinding

script, findTargetLocation, ref, x, y, range=1, begin
    # From starting point, x,y see which player unit is closest using BFS
    # range is used for attacking range
    variable(graph, i, j, adj, reachable, r, sl)
    
    graph := initArray()    # Array of traversable tiles within range 
    appendPair(graph, x, y)
    
    reachable := initArray() # Array of tiles that are actually reachable
    
    for(i, 0--x, mapWidth--x--1) do(
        for(j, 0--y, mapHeight--y--1) do(
            if(readPassBlock(x+i, y+j) || npcAtSpot(x+i, y+j) || sqrt(((x+i) -- x)^2 + ((y+j) -- y)^2) > 10) then(
                # Obstructed tile
                continue
            )
            appendPair(graph, x+i, y+j)
        )
    )
    
    # Record adjacentcies between tiles in graph
    for(i, 0, childCount(graph)--1) do(
        adj := initArray()
        setParent(adj, sliceChild(graph, i))
        for(j, 0, childCount(graph)--1) do(
            # Append this node to adj array if exactly 1 space away
            if(abs(getPairElementX(graph, j)--getPairElementX(graph, i)) + abs(getPairElementY(graph, j)--getPairElementY(graph, i)) == 1) then(
                append(adj, j)
            )
        )
    )
    adj := 0
    searchMovable()
    
    # Reachable tiles are ordered by closeness, so the first child will be the 
    # best target to path to
    if(firstChild(reachable)) then(
        r := createContainer(0,0)
        putSlice(r, getPairElementX(graph, sliceX(firstChild(reachable))), getPairElementY(graph, sliceX(firstChild(reachable))))
        setSliceExtra(r, extra0, sliceY(firstChild(reachable)))
    ) else(
        r := 0
    )
    
    freeSlice(graph)
    freeSlice(reachable)
    
    exitReturning(r)
    
    subscript, searchMovable, begin
        # BFS algorithm
        variable(Q, lvl, vis, v, c, a, level, tX, tY)
        Q := initArray()
        append(Q, 0) # Inserting s in queue until all its neighbour vertices are marked.
        
        lvl := initArray(childCount(graph))
        setElement(lvl, 0, 0)
        
        vis := initArray(childCount(graph))
        setElement(vis, 0, true) # Mark as visited
        while(childCount(Q) > 0) do(
            # Removing that vertex from queue,whose neighbour will be visited now
            v := pop(Q, 0)
            
            # processing all the neighbours of v
            a := firstChild(sliceChild(graph, v)) # adjacency array 
            for(c, 0, childCount(a)--1) do(
                if(getElement(vis, getElement(a, c)) == false) then(
                    # Not Visited
                    setElement(lvl, getElement(a, c), getElement(lvl, v)+1) # Set level as increment of parent node
                    append(Q, getElement(a, c))
                    setElement(vis, getElement(a, c), true) # Mark as visited
                    
                    level := getElement(lvl, getElement(a, c))
                    # Only append this as to reachable if it's in attacking range of a player unit
                    for(i, 0--range, range) do(
                        for(j, 0--range, range) do(
                            if(abs(i) + abs(j) <> range) then(continue) # Not exact range
                            tX := i + getPairElementX(graph, getElement(a, c)) # coordinates from the actual graph
                            tY := j + getPairElementY(graph, getElement(a, c))
                            if(npcAtSpot(tX, tY) 
                            && getNPCID(npcAtSpot(tX, tY)) <= unit:radar
                            && pairIndex(reachable, getElement(a, c), level) == -1
                            ) then(
                                # Unit is within attacking range of this tile
                                appendPair(reachable, getElement(a, c), level) # Pair: (child index of graph, level)
                                if(level < getPairElementY(reachable, 0)) then(
                                    # This is closer than the previous closest tile, so make it the first child
                                    sliceToBack(sliceChild(reachable, pairIndex(reachable, getElement(a, c), level)))
                                )
                            )
                        )
                    )
                )
            )
        )
        
        freeSlice(lvl)
        freeSlice(vis)
        freeSlice(Q)
    end
end