# Katja's Abyss: Tactics
# by Kiefer Nemeth
# effects.hss
# Contains scripts for animations, visual effects, fog of war, etc.

# "createAnimation" takes an existing on-screen sprite, assigns it values for duration and speed,
# and adds it to an array of handles (unique numbers that point to a specific sprite). 
# During each frame, the main game loop calls "animateEffects", which loops through the array of handles
# and decrements its timer, determining whether the sprite should increment frames, reset its state  
# (repeat animation), or be deleted (it finished its one-time animation).
# Alternatively, animateEffects causes animating text to move upward with acceleration.

script, createAnimation, handle, x, y, duration, spd=1, repeat=0, begin
    # takes a Slice handle and converts it into an animating sprite
    # spd is tickcount: higher is slower
    setSliceLookup(handle, sli:animate)
    putSlice(handle, x--(sliceWidth(handle)/2), y--(sliceHeight(handle)/2))
    setSliceExtra(handle, extra0, duration*time:1)
    setSliceExtra(handle, extra1, spd*time:1)
    if(repeat) then(
        setSliceExtra(handle, extra2, duration)
    )
    # store handle in array
    append(animHandles, handle)
end

script, delayedAnimation, handle, x, y, duration, spd=1, repeat=0, begin
    # Called at the end of a timer, sets the slice visible before creating an animation
    setSliceVisible(handle, true)
    createAnimation(handle, x, y, duration, spd, repeat)
end

script, animateEffects, purge=false, begin
    # Search through all slices (including descendants) from the parent "tree"
    # and act on slices with the lookup code sli:animate
    # Decrement a slice's individual 'timer' (extra data 0)
    # If timer value mod spd (extra data 1) == 0, increment frame
    # If timer == 0 & repeat (extra data 2) > 0, reset timer and continue
    # If timer == 0 & repeat == 0, mark slice to be freed
    
    # At the end of this script, cycle through slice children and free sli:animate
    # and sli:glow slices that are invisible
    
    # If purge is true, instead set all sli:animate slices invisible, so they
    # will be freed at the end of this script.
    variable(i, sl)
    
    for(i, childCount(animHandles)--1, 0, -1) do(     # Work through array backwards so removing elements is safe
        sl := getElement(animHandles, i)
        # Animate this slice
        if(purge || sliceIsValid(sl) == false) then(
            pop(animHandles, i) # Remove handle from array
            if(sliceIsValid(sl)) then(freeSlice(sl))
        ) else(
            # Decrement timer
            setSliceExtra(sl, extra0, getSliceExtra(sl, extra0)--1)
            if(getSliceExtra(sl, extra0),mod,getSliceExtra(sl, extra1) == 0) then(
                # timer value is divisible by spd
                if(sliceIsSprite(sl)) then(
                    # Increment frame
                    setSpriteFrame(sl, (getSpriteFrame(sl) + 1),mod,spriteFrameCount(sl))
                ) elseif(sliceIsText(sl)) then(
                    # Adjust vertical velocity (text decelerates as it rises)
                    setSliceVelocityY(sl, 0--sqrt(getSliceExtra(sl, extra0)/2))
                )
            )
            if(getSliceExtra(sl, extra0) == 0) then(
                # Timer hit 0: reset or mark slice to be freed
                if(getSliceExtra(sl, extra2) > 0) then(
                    # Extra 2 is repeat duration, reset timer to this value
                    setsliceExtra(sl, extra0, getSliceExtra(sl, extra2))
                ) else(
                    # Duration over, free slice
                    pop(animHandles, i) # Remove handle from array
                    freeSlice(sl)
                )
            )
        )
    )
end